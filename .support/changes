#!/bin/bash

set -e
set -u
set -o pipefail

function base() {
    set +o pipefail
    diff -u <(git rev-list --first-parent "$1") <(git rev-list --first-parent "$2") | sed -ne 's/^ //p' | head -1
    set -o pipefail
}

function packages() {
    git ls-tree -r --name-only "$1" | grep '/PKGBUILD$' | sed 's#/PKGBUILD$##'
}

function changes() {
    git diff --name-only "$1".."$2"
}

function updates() {
    comm -12 <(changes "$1" "$2" | perl -ne '/^([^.].*?\/.*?)(?:\/|$)/ and print "$1\n"' | sort | uniq) <(packages "$2" | sort | uniq)
}

function deletions() {
    comm -23 <(changes "$1" "$2" | perl -ne '/^([^.].*?\/.*?)(?:\/|$)/ and print "$1\n"' | sort | uniq) <(packages "$2" | sort | uniq)
}

function merge() {
    test "$(git show --no-patch --format="%P" "$1" | wc -w)" -gt 1
}

function parents() {
    git show --summary --format="%P" "$1" | sed -e '/^$/d'
}

function topics() {
    parents "$1" | sed -e 's/^[a-z0-9]* //'
}

function same() {
    test "$(git rev-parse "$1") -eq $(git rev-parse "$2")"
}

function ancestor() {
    git rev-list --first-parent "$1" | grep -q "$(git rev-parse "$2")"
}

base=""
case "${1-}" in
    -b)
        base="1"
        shift
        ;;
esac

updated=""
deleted=""
case "${1-}" in
    -u)
        updated="1"
        shift
        ;;
    -d)
        deleted="1"
        shift
        ;;
    *)
        updated="1"
        deleted="1"
        ;;
esac

if [[ "${updated}" == "${deleted}" ]]; then
    signs="1"
else
    signs=""
fi

# every non-merge commit on master shall build that commit's package and
# publish it.
# every commit on a branch shall build its packages since it was borne out of
# master.
# every merge commit on master shall build its parent branches packages, except
# those from master since it has already been built.

head="$(git rev-parse HEAD)"
target="${1-master}"
source="${3-${target}}"
current="${2:-$head}"

if ancestor "${source}" "${current}" && merge "${current}"; then
    for parent in $(topics "${current}"); do
        if [[ -n ${base} ]]; then base "${target}" "${parent}"; fi
        if [[ -n ${updated} ]]; then updates "$(base "${target}" "${parent}")" "${parent}" | sed "s/^/${signs:+U }/"; fi
        if [[ -n ${deleted} ]]; then deletions "$(base "${target}" "${parent}")" "${parent}" | sed "s/^/${signs:+D }/"; fi
    done | sort | uniq
elif ancestor "${source}" "${current}" && ! merge "${current}"; then
    if [[ -n ${base} ]]; then git rev-parse "${current}^"; fi
    if [[ -n ${updated} ]]; then updates "${current}^" "${current}" | sed "s/^/${signs:+U }/"; fi
    if [[ -n ${deleted} ]]; then deletions "${current}^" "${current}" | sed "s/^/${signs:+D }/"; fi
elif ! ancestor "${source}" "${current}"; then
    if [[ -n ${base} ]]; then base "${target}" "${current}"; fi
    if [[ -n ${updated} ]]; then updates "$(base "${target}" "${current}")" "${current}" | sed "s/^/${signs:+U }/"; fi
    if [[ -n ${deleted} ]]; then deletions "$(base "${target}" "${current}")" "${current}" | sed "s/^/${signs:+D }/"; fi
fi
